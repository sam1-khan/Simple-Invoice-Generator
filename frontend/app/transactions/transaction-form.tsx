"use client";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { zodResolver } from "@hookform/resolvers/zod";
import { useFieldArray, useForm } from "react-hook-form";
import { z } from "zod";
import { transactionSchema, Client, InvoiceOwner } from "@/app/transactions/data/schema"; // Import the schema and types
import { useEffect, useState } from "react"; // For managing state and side effects
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select"; // Import shadcn/ui Select components

// Define the schema for invoice items
const invoiceItemSchema = z.object({
  name: z.string().min(1, { message: "Item name is required" }),
  description: z.string().min(1, { message: "Item description is required" }),
  quantity: z.number().min(1, { message: "Quantity must be at least 1" }),
  unit: z.string().min(1, { message: "Unit is required" }),
  unit_price: z.number().min(0, { message: "Unit price must be at least 0" }),
});

// Combine the transaction schema with invoice items
const invoiceFormSchema = transactionSchema.extend({
  items: z.array(invoiceItemSchema).nonempty({ message: "At least one item is required" }),
});

type InvoiceFormValues = z.infer<typeof invoiceFormSchema>;

interface InvoiceFormProps {
  onClose: () => void; // Add onClose prop
}

export default function InvoiceForm({ onClose }: InvoiceFormProps) {
  const [clients, setClients] = useState<Client[]>([]); // State for the list of clients
  const [invoiceOwners, setInvoiceOwners] = useState<InvoiceOwner[]>([]); // State for the list of invoice owners
  const [isClientModalOpen, setIsClientModalOpen] = useState(false); // State for the client creation modal

  // Fetch clients and invoice owners from the backend
  useEffect(() => {
    const fetchData = async () => {
      try {
        // Fetch clients
        const clientsResponse = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/v1/clients/`);
        if (!clientsResponse.ok) {
          throw new Error("Failed to fetch clients");
        }
        const clientsData = await clientsResponse.json();
        setClients(clientsData);

        // Fetch invoice owners
        const ownersResponse = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/v1/invoice-owners/`);
        if (!ownersResponse.ok) {
          throw new Error("Failed to fetch invoice owners");
        }
        const ownersData = await ownersResponse.json();
        setInvoiceOwners(ownersData);
      } catch (error) {
        console.error("Failed to fetch data:", error);
      }
    };

    fetchData();
  }, []);

  // Initialize the form
  const form = useForm<InvoiceFormValues>({
    resolver: zodResolver(invoiceFormSchema),
    defaultValues: {
      id: 0, // This will be auto-generated by the backend
      client: null, // Default to null (no client selected)
      reference_number: "",
      tax_percentage: 0,
      total_price: 0,
      tax: 0,
      grand_total: 0,
      date: "",
      notes: "",
      is_taxed: false,
      is_paid: false,
      is_quotation: false,
      transit_charges: 0,
      created_at: "",
      updated_at: "",
      items: [],
    },
  });

  const { fields, append, remove } = useFieldArray({
    name: "items",
    control: form.control,
  });

  // Handle form submission
  const onSubmit = async (values: InvoiceFormValues) => {
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/v1/invoices/`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(values),
      });

      if (!response.ok) {
        throw new Error("Failed to create invoice");
      }

      const data = await response.json();
      console.log("Invoice created:", data);
      onClose(); // Close the form after successful submission
    } catch (error) {
      console.error("Error creating invoice:", error);
    }
  };

  // Handle creating a new client
  const handleCreateClient = async (newClient: Omit<Client, "id">) => {
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/v1/clients/`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newClient),
      });

      if (!response.ok) {
        throw new Error("Failed to create client");
      }

      const data = await response.json();
      setClients([...clients, data]); // Add the new client to the list
      form.setValue("client", data); // Set the new client as the selected client
      setIsClientModalOpen(false); // Close the modal
    } catch (error) {
      console.error("Error creating client:", error);
    }
  };

  return (
    <div className="flex justify-center items-center h-screen">
      <Form {...form}>
        <form
          onSubmit={form.handleSubmit(onSubmit)}
          className="flex-1 max-w-md space-y-5"
        >
          {/* Client Selection */}
          <FormField
            control={form.control}
            name="client"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Client</FormLabel>
                <FormControl>
                  <div className="flex gap-2">
                    <Select
                      onValueChange={(value) => {
                        const selectedClient = clients.find(
                          (client) => client.id === parseInt(value)
                        );
                        field.onChange(selectedClient);
                      }}
                      value={field.value?.id?.toString() || ""}
                    >
                      <SelectTrigger className="flex-1">
                        <SelectValue placeholder="Select a client" />
                      </SelectTrigger>
                      <SelectContent>
                        {clients.map((client) => (
                          <SelectItem key={client.id} value={client.id.toString()}>
                            {client.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <Button
                      type="button"
                      onClick={() => setIsClientModalOpen(true)}
                    >
                      + New Client
                    </Button>
                  </div>
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          {/* Invoice Items */}
          <div className="space-y-5">
            {fields.map((field, index) => (
              <div key={field.id} className="border p-4 rounded-lg space-y-3">
                <FormField
                  control={form.control}
                  name={`items.${index}.name`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Item Name</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter item name" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name={`items.${index}.description`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Item Description</FormLabel>
                      <FormControl>
                        <Textarea placeholder="Enter item description" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name={`items.${index}.quantity`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Quantity</FormLabel>
                      <FormControl>
                        <Input type="number" placeholder="Enter quantity" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name={`items.${index}.unit`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Unit</FormLabel>
                      <FormControl>
                        <Input placeholder="Enter unit (e.g., pc, box)" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name={`items.${index}.unit_price`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Unit Price</FormLabel>
                      <FormControl>
                        <Input type="number" placeholder="Enter unit price" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <Button
                  type="button"
                  variant="destructive"
                  onClick={() => remove(index)}
                >
                  Remove Item
                </Button>
              </div>
            ))}

            <Button
              type="button"
              onClick={() =>
                append({
                  name: "",
                  description: "",
                  quantity: 1,
                  unit: "",
                  unit_price: 0,
                })
              }
            >
              Add Item
            </Button>
          </div>

          <Button type="submit">Create Invoice</Button>
        </form>
      </Form>

      {/* Client Creation Modal */}
      {isClientModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
          <div className="bg-white p-6 rounded-lg w-96">
            <h2 className="text-xl font-bold mb-4">Create New Client</h2>
            <form
              onSubmit={(e) => {
                e.preventDefault();
                const formData = new FormData(e.target as HTMLFormElement);
                const newClient = {
                  name: formData.get("name") as string,
                  invoice_owner: invoiceOwners[0] || null, // Use the first invoice owner (or allow selection)
                  address: formData.get("address") as string,
                  ntn_number: formData.get("ntn_number") as string,
                  phone: formData.get("phone") as string,
                };
                handleCreateClient(newClient);
              }}
              className="space-y-4"
            >
              <Input name="name" placeholder="Client Name" required />
              <Input name="address" placeholder="Client Address" />
              <Input name="ntn_number" placeholder="NTN Number" />
              <Input name="phone" placeholder="Phone Number" required />
              <div className="flex gap-2">
                <Button type="submit">Save</Button>
                <Button
                  type="button"
                  variant="destructive"
                  onClick={() => setIsClientModalOpen(false)}
                >
                  Cancel
                </Button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}